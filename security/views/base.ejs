<!--新增学生信息-->
<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>base</title>
    <!-- Bootstrap core CSS -->
    <link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .form-wrap {
            width: 300px;
            margin: 0 auto;
        }

        .content {
            width: 300px;
            height: 500px;
            margin: auto;
        }

        .content>.textarea {
            width: 300px;
            height: 100px;
            border: 1px solid
        }

        #btn {
            width: 130px;
            height: 30px;
            line-height: 50px;
            margin: auto;
        }
    </style>
</head>

<body>
    <nav class="navbar navbar-default">
        <div class="container">
            <div class="navbar-header">
                <a class="navbar-brand" href="#">base64</a>
            </div>
        </div>
    </nav>
    <!-- Begin page content -->
    <div class="container">
        <div class="page-header">
            <h1>base64</h1>
        </div>
        <a href="/" class="btn btn-success">返回首页</a>
        <form action="/base" method="POST">
            <div class="content">
                明文:<textarea class='textarea' id="enText" cols="30" rows="10"></textarea>
                <!-- 明文: <input type="text" id='textarea' class="enText" rows='10' cols = '60'> -->
                <div id="btn">
                    <a herf="#" class="btn btn-info dropdown-toggle" id='encrypt'>加密</a>
                    <a herf="#" class="btn btn-danger dropdown-toggle" id='decode'>解密</a>
                </div>
                <br>
                密文:<textarea class='textarea' id="deText" cols="30" rows="10"></textarea>
            </div>

        </form>
    </div>





    <script>
        //定义base64的函数
        function Base64() {
            // private property
            _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            // public method for encoding
            this.encode = function (input) {
                var output = "";
                var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
                var i = 0;
                input = _utf8_encode(input);
                while (i < input.length) {
                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);
                    enc1 = chr1 >> 2;
                    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                    enc4 = chr3 & 63;
                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }
                    output = output +
                        _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
                        _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
                }
                return output;
            }
            // public method for decoding
            this.decode = function (input) {
                var output = "";
                var chr1, chr2, chr3;
                var enc1, enc2, enc3, enc4;
                var i = 0;
                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                while (i < input.length) {
                    enc1 = _keyStr.indexOf(input.charAt(i++));
                    enc2 = _keyStr.indexOf(input.charAt(i++));
                    enc3 = _keyStr.indexOf(input.charAt(i++));
                    enc4 = _keyStr.indexOf(input.charAt(i++));
                    chr1 = (enc1 << 2) | (enc2 >> 4);
                    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                    chr3 = ((enc3 & 3) << 6) | enc4;
                    output = output + String.fromCharCode(chr1);
                    if (enc3 != 64) {
                        output = output + String.fromCharCode(chr2);
                    }
                    if (enc4 != 64) {
                        output = output + String.fromCharCode(chr3);
                    }
                }
                output = _utf8_decode(output);
                return output;
            }
            // private method for UTF-8 encoding
            _utf8_encode = function (string) {
                string = string.replace(/\r\n/g, "\n");
                var utftext = "";
                for (var n = 0; n < string.length; n++) {
                    var c = string.charCodeAt(n);
                    if (c < 128) {
                        utftext += String.fromCharCode(c);
                    } else if ((c > 127) && (c < 2048)) {
                        utftext += String.fromCharCode((c >> 6) | 192);
                        utftext += String.fromCharCode((c & 63) | 128);
                    } else {
                        utftext += String.fromCharCode((c >> 12) | 224);
                        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }
                }
                return utftext;
            }
            // private method for UTF-8 decoding
            _utf8_decode = function (utftext) {
                var string = "";
                var i = 0;
                var c = c1 = c2 = 0;
                while (i < utftext.length) {
                    c = utftext.charCodeAt(i);
                    if (c < 128) {
                        string += String.fromCharCode(c);
                        i++;
                    } else if ((c > 191) && (c < 224)) {
                        c2 = utftext.charCodeAt(i + 1);
                        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                        i += 2;
                    } else {
                        c2 = utftext.charCodeAt(i + 1);
                        c3 = utftext.charCodeAt(i + 2);
                        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                        i += 3;
                    }
                }
                return string;
            }
        }



        //获取加解密按钮
        let encryptBtn = document.querySelector('#encrypt');
        let decodeBtn = document.querySelector('#decode');

        //获取明文框和密文框
        let enText = document.getElementById('enText')
        let deText = document.getElementById('deText');
       
        encryptBtn.onclick = function () {
            let value = enText.value;
            if(value == '') {
                alert('请输入要加密的内容');
                return;
            }
            var b = new Base64();
            var str = b.encode(value);
            deText.innerHTML = str;
        }

        decodeBtn.onclick = function() {
            let value = deText.value;
            if(value == '') {
                alert('请输入要解密的内容');
                return;
            }
            var b = new Base64();
            str = b.decode(value);
            enText.innerHTML = str;
        }

    

    </script>
</body>

</html>